{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/generate.ts","webpack:///./src/lib/embed.ts","webpack:///./src/lib/utils.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ITERATOR_REGEX","DEFAULT_OPTIONS","addVariationToSelector","selector","variationAbbreviation","addPropertyToSelector","propertyAbbreviation","toLowerCase","addValueToSelector","valueAbbreviation","toUpperCase","abbreviateProperty","propertyName","split","map","word","charAt","join","ITERATOR_SEARCH","RegExp","generate","ainsley","options","mergedOptions","generateFromAst","ainsleyToAst","ainsleyRules","css","lastVariations","length","ainsleyRule","firstChange","variations","variationsToClose","slice","variationInstruction","startsWith","variationsToOpen","content","selectorSuffix","declaration","inheritedVariables","newVariables","undefined","variables","keys","variable","modAndBase","parseVariable","mod","base","rulesListWithoutVariations","children","ainsleyChildrenToAst","variationSet","concat","flatMap","ainsleyASTNode","Array","isArray","ainsleyNestedASTNode","ainsleyChildren","child","ainsleyRuleToAst","ainsleyPropertyToAst","declarations","variablesFound","propertyMatches","match","valueMatches","push","iteratorAndType","iterator","location","variableName","abbreviation","combination","combinationIndex","current","reduce","part","replacePart","declarationPart","includes","replace","ainsleyProperty","propertyInput","propertyValues","propertyData","indexOf","id","styleEl","document","querySelector","createElement","type","setAttribute","head","appendChild","innerHTML","isObject","x","combinations","mods","list","index","option","prev"],"mappings":"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","file":"ainsley.client.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","import {\n  Ainsley,\n  AinsleyRule,\n  AinsleyPropertyOrPlaceholder,\n  AinsleyVariableMap,\n  AinsleyChild,\n  AinsleyChildren,\n  AinsleyGenerateOptions\n} from \"../types\";\nimport { combinations } from \"./utils\";\n\ninterface AinsleyFlatASTNode {\n  variations: Array<[string, string]>;\n  content: string | AinsleyRule;\n}\ntype AinsleyFlatAST = AinsleyFlatASTNode[];\ninterface AinsleyASTNode {\n  variations: Array<[string, string]>;\n  content: string | AinsleyRule | AinsleyFlatASTNode;\n}\ntype AinsleyAST = AinsleyASTNode[];\n\nexport const ITERATOR_REGEX = \"\\\\{[a-zA-Z0-9_-]+\\\\}\";\nexport const DEFAULT_OPTIONS: AinsleyGenerateOptions = {\n  addVariationToSelector: (selector, variationAbbreviation) =>\n    variationAbbreviation + \"-\" + selector,\n  addPropertyToSelector: (selector, propertyAbbreviation) =>\n    selector + propertyAbbreviation.toLowerCase(),\n  addValueToSelector: (selector, valueAbbreviation) =>\n    selector + valueAbbreviation.toUpperCase(),\n  abbreviateProperty: (propertyName) => [\n    propertyName\n      .split(\"-\")\n      .map((word) => word.charAt(0))\n      .join(\"\")\n      .toLowerCase(),\n    propertyName.toLowerCase()\n  ]\n};\n\nconst ITERATOR_SEARCH = new RegExp(ITERATOR_REGEX, \"g\");\n\nexport const generate = (\n  ainsley: Ainsley,\n  options: Partial<AinsleyGenerateOptions> = {}\n): string => {\n  const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n  return generateFromAst(\n    ainsleyToAst(ainsley, mergedOptions, {}),\n    mergedOptions\n  );\n};\n\n// next step:\n// get variations to append to nested variations by passing them down;\n// kinda like variables. this allows us to merge nested variations in the output\n// which is kinda fun. but mostly because I don't know another way to do it\n\n// next next step:\n// get combinations to return a read only array - avoiding the need to\n// recursively clone and concat - also means comparisons for this flattening\n// business is made much simpler\n\nconst generateFromAst = (\n  ainsleyRules: AinsleyFlatAST,\n  options: AinsleyGenerateOptions\n): string => {\n  let css = \"\";\n  let lastVariations: Array<[string, string]> = [];\n  for (let i = 0; i < ainsleyRules.length; i++) {\n    const ainsleyRule = ainsleyRules[i];\n\n    let firstChange = 0;\n    while (\n      firstChange < lastVariations.length &&\n      lastVariations[firstChange] === ainsleyRule.variations[firstChange]\n    ) {\n      firstChange += 1;\n    }\n\n    const variationsToClose = lastVariations.slice(firstChange);\n    for (const variationToClose of variationsToClose) {\n      const variationInstruction = variationToClose[1];\n      if (variationInstruction.startsWith(\"@\")) css += \"}\";\n    }\n    const variationsToOpen = ainsleyRule.variations.slice(firstChange);\n    for (const variationToOpen of variationsToOpen) {\n      const variationInstruction = variationToOpen[1];\n      if (variationInstruction.startsWith(\"@\"))\n        css += `${variationInstruction}{`;\n    }\n\n    if (typeof ainsleyRule.content === \"string\") {\n      css += ainsleyRule.content;\n    } else {\n      let selector = ainsleyRule.content[0];\n      let selectorSuffix = \"\";\n\n      for (let i = 0; i < ainsleyRule.variations.length; i++) {\n        const variationAbbreviation = ainsleyRule.variations[i][0];\n        const variationInstruction = ainsleyRule.variations[i][1];\n        if (variationInstruction === \"\") continue;\n        if (!variationInstruction.startsWith(\"@\")) {\n          selectorSuffix += `${variationInstruction}`;\n        }\n        selector = options.addVariationToSelector(\n          selector,\n          variationAbbreviation\n        );\n      }\n      css += `.${selector}${selectorSuffix}{${ainsleyRule.content[1]\n        .map((declaration) => `${declaration[0]}:${declaration[1]}`)\n        .join(\";\")}}`;\n    }\n    lastVariations = ainsleyRule.variations;\n  }\n  for (const variationToClose of lastVariations) {\n    const variationInstruction = variationToClose[1];\n    if (variationInstruction.startsWith(\"@\")) css += \"}\";\n  }\n  return css;\n};\n\nconst ainsleyToAst = (\n  ainsley: Ainsley,\n  options: AinsleyGenerateOptions,\n  inheritedVariables: AinsleyVariableMap\n): AinsleyFlatAST => {\n  // first, compute variables\n  const newVariables = { ...inheritedVariables };\n  if (ainsley.variables !== undefined) {\n    const variables = ainsley.variables;\n    Object.keys(variables).map((variable: string) => {\n      const modAndBase = parseVariable(variable);\n      const mod = modAndBase[0];\n      const base = modAndBase[1];\n      if (mod === 0) {\n        newVariables[base] = variables[variable];\n      } else if (mod === 2) {\n        newVariables[base] = {\n          ...inheritedVariables[base],\n          ...variables[variable]\n        };\n      }\n    });\n  }\n\n  // then, flatten children into ast\n  const rulesListWithoutVariations =\n    ainsley.children === undefined\n      ? []\n      : ainsleyChildrenToAst(ainsley.children, options, newVariables);\n\n  // lastly, multiply ast with variations\n  const rulesList = combinations(\n    (ainsley.variations ?? []).map((variationSet) =>\n      [[\"\", \"\"] as [string, string]].concat(variationSet)\n    )\n  ).flatMap((variations) => {\n    return rulesListWithoutVariations.map((ainsleyASTNode) => {\n      if (\n        typeof ainsleyASTNode.content === \"string\" ||\n        Array.isArray(ainsleyASTNode.content)\n      ) {\n        const ainsleyFlatASTNode = ainsleyASTNode as AinsleyFlatASTNode;\n        return {\n          variations,\n          content: ainsleyFlatASTNode.content\n        };\n      } else {\n        const ainsleyNestedASTNode = ainsleyASTNode as {\n          variations: Array<[string, string]>;\n          content: AinsleyFlatASTNode;\n        };\n        return {\n          variations: [...variations, ...ainsleyNestedASTNode.variations],\n          content: ainsleyNestedASTNode.content.content\n        };\n      }\n    });\n  });\n\n  return rulesList;\n};\n\nconst ainsleyChildrenToAst = (\n  ainsleyChildren: AinsleyChildren,\n  options: AinsleyGenerateOptions,\n  variables: AinsleyVariableMap\n): AinsleyAST =>\n  ainsleyChildren.flatMap((child: AinsleyChild) => {\n    if (typeof child === \"string\") {\n      return [\n        {\n          variations: [],\n          content: child\n        }\n      ];\n    } else if (Array.isArray(child)) {\n      if (Array.isArray(child[1])) {\n        return ainsleyRuleToAst(child as AinsleyRule, options, variables);\n      } else {\n        return ainsleyPropertyToAst(\n          child as AinsleyPropertyOrPlaceholder,\n          options\n        );\n      }\n    } else {\n      return ainsleyToAst(child, options, variables);\n    }\n  });\n\ntype AinsleyGenerateIteratorContext = [string, string, string | number, number];\n\nconst ainsleyRuleToAst = (\n  ainsleyRule: AinsleyRule,\n  options: AinsleyGenerateOptions,\n  variables: AinsleyVariableMap\n): AinsleyAST => {\n  const selector = ainsleyRule[0];\n  const declarations = ainsleyRule[1];\n  const variablesFound: Array<[string, number]> = [];\n  declarations.map((declaration) => {\n    const propertyMatches = declaration[0].match(ITERATOR_SEARCH) ?? [];\n    const valueMatches = `${declaration[1]}`.match(ITERATOR_SEARCH) ?? [];\n    propertyMatches.map((match) => variablesFound.push([match, 0]));\n    valueMatches.map((match) => variablesFound.push([match, 1]));\n  });\n\n  return combinations(\n    variablesFound.map((iteratorAndType: [string, number]) => {\n      const iterator = iteratorAndType[0];\n      const location = iteratorAndType[1];\n      const variableName = iterator.slice(1, -1);\n      return Object.keys(variables[variableName]).map(\n        (abbreviation: string): AinsleyGenerateIteratorContext => [\n          iterator,\n          abbreviation,\n          variables[variableName][abbreviation],\n          location\n        ]\n      );\n    })\n  ).map((combination) => {\n    let combinationIndex = 0;\n    let current: AinsleyGenerateIteratorContext = combination[combinationIndex];\n\n    return {\n      variations: [],\n      content: [\n        combination.reduce(\n          (selector: string, part: AinsleyGenerateIteratorContext) => {\n            if (part[3] === 0) {\n              return options.addPropertyToSelector(selector, part[1]);\n            } /* if (part[3] === 1) */ else {\n              return options.addValueToSelector(selector, part[1]);\n            }\n          },\n          selector\n        ),\n        declarations.map((declaration) => {\n          const replacePart = (declarationPart: string): string => {\n            while (\n              combinationIndex < combination.length &&\n              declarationPart.includes(current[0])\n            ) {\n              declarationPart = declarationPart.replace(\n                current[0],\n                `${current[2]}`\n              );\n              current = combination[++combinationIndex];\n            }\n            return declarationPart;\n          };\n          return [\n            replacePart(declaration[0]),\n            replacePart(`${declaration[1]}`)\n          ];\n        })\n      ]\n    };\n  });\n};\n\nconst ainsleyPropertyToAst = (\n  ainsleyProperty: AinsleyPropertyOrPlaceholder,\n  options: AinsleyGenerateOptions\n): AinsleyAST => {\n  const propertyInput = ainsleyProperty[0];\n  const propertyValues = ainsleyProperty[1];\n\n  const propertyData: [string, string] = options.abbreviateProperty(\n    propertyInput\n  );\n  const propertyAbbreviation = propertyData[0];\n  const propertyName = propertyData[1];\n\n  return Object.keys(propertyValues).map((valueAbbreviation: string) => ({\n    variations: [],\n    content: [\n      options.addValueToSelector(\n        options.addPropertyToSelector(\"\", propertyAbbreviation),\n        valueAbbreviation\n      ),\n      [[propertyName, propertyValues[valueAbbreviation]]]\n    ]\n  }));\n};\n\nconst parseVariable = (variable: string): [number, string] => {\n  const mod = \"?+\".indexOf(variable[0]) + 1;\n  const base = mod > 0 ? variable.slice(1) : variable;\n  return [mod, base];\n};\n","// singleton embed pattern, using id as the unique identifier\nexport const embed = (css: string, id?: string): void => {\n  let styleEl: HTMLStyleElement | null = null;\n  if (id !== undefined) styleEl = document.querySelector(`style#${id}`);\n\n  if (styleEl === null) {\n    styleEl = document.createElement(\"style\");\n    styleEl.type = \"text/css\";\n    if (id !== undefined) styleEl.setAttribute(\"id\", id);\n    document.head.appendChild(styleEl);\n  }\n\n  styleEl.innerHTML = css;\n};\n","export const isObject = (x: any): boolean =>\n  !!(x !== null && typeof x === \"object\" && !Array.isArray(x));\n\nexport const combinations = <T>(mods: T[][]) => {\n  let list: T[][] = [[]];\n  let index = 0;\n  while (index < mods.length) {\n    list = mods[index++].flatMap((option) =>\n      list.map((prev) => prev.concat([option]))\n    );\n  }\n  return list;\n};\n\nexport const memoize = (func: (arg1: string, arg2?: string) => any): any => {\n  const cache: Record<string, any> = {};\n  return (arg1: string, arg2?: string) => {\n    const cacheKey = arg1 + \"{}\" + (arg2 as string);\n    if (!(cache[cacheKey] as boolean)) cache[cacheKey] = func(arg1, arg2);\n    return cache[cacheKey];\n  };\n};\n"],"sourceRoot":""}