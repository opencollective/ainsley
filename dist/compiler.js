import t from"accb";const e=t=>{if("object"!=typeof t)return t;const n=[],o=t.length;for(let c=0;c<o;c++)n.push(e(t[c]));return n},n=(t,e)=>{const n=[],o=t.length;for(let c=0;c<o;c++)n.push(e(t[c]));return n},o=t=>[].concat.apply([],t),c=t=>{let e=[[]];for(console.log(t.length,t);t.length;)e=o(t.shift().map(t=>e.map(e=>e.concat([t]))));return e},r={flex:"fx",background:"bg",min:"n",max:"x",style:"st",overflow:"ov",cursor:"cu"},s=/\{[a-z]+\}/gi,l=t=>r[t]||t[0],a=t=>`${t[0]}:${t[1]}`,f=t=>[["",""]].concat(t),u=(t,o)=>{const r=o[1].reduce((t,e)=>[t[0].concat(e[0].match(s)||[]),t[1].concat(e[1].match(s)||[])],[[],[]]);return n(c(n(r[0].concat(r[1]),e=>n(Object.keys(t[e]),n=>[e,n,t[e][n]]))),t=>{const n=e(o);for(let e=0;n[0].includes("&");e++)n[0]=n[0].replace("&",t[e][1]);for(let e=0;e<n[1].length;e++){const o=n[1][e];for(;t.length>0&&o[0].includes(t[0][0]);){const e=t.shift();o[0]=o[0].replace(e[0],e[2])}}for(let e=0;e<n[1].length;e++){const o=n[1][e];for(;t.length>0&&o[1].includes(t[0][0]);){const e=t.shift();o[1]=o[1].replace(e[0],e[2])}}return n})},p=t=>{const e=n(t[0].split("-"),l).join("");return n(t[1],o=>[`${e}${n(o.split(" "),t=>t[0].toUpperCase()).join("")}`,[[t[0],o]]])},i=t=>{const e=[].concat(o(n(t.defs||[],e=>u(t,e))),o(n(t.props||[],p)),t.raw||[]);return o(n(c(n(t.mods||[],f)),t=>t.reduce((t,e)=>e[1]?"@"===e[1][0]?[[e[1],n(t,t=>[`${e[0]}${t[0]}`,t[1]])]]:n(t,t=>[`${e[0]}${t[0]}${e[1]}`,t[1]]):t,e)))},h=t=>"@"===t[0][0]?`${t[0]}{${g(t[1])}}`:`.${t[0]}{${n(t[1],a).join(";")}}`,g=t=>n(t,h).join(""),$=t=>g(i(t)),m=(t,e)=>{const n=i(t);for(let t=n.length-1;t>=0;t--)e.insertRule(h(n[t]),0)};t&&t($);export{m as ainsleyInsert,i as ainsleyToAst,$ as ainsleyToCss,g as astToCss,u as expandDefs,p as expandProps,s as iteratorRegex,r as propFragMap,h as ruleToCSS};
//# sourceMappingURL=compiler.js.map
