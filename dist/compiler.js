const t=/\{[a-z]+\}/gi,n=t=>[].concat.apply([],t),a=t=>{let a=[[]];for(;t.length;)a=n(t.shift().map(t=>a.map(n=>n.concat([t]))));return a},c={flex:"fx",background:"bg",min:"n",max:"x",style:"st",overflow:"ov",cursor:"cu"},e=(n,c)=>{let e=[],o=[];return c[1].forEach(n=>{e=e.concat(n[0].match(t)||[]),o=o.concat(n[1].match(t)||[])}),a(e.concat(o).map(t=>Object.keys(n[t]).map(a=>[t,a,n[t][a]]))).map(t=>{const n=JSON.parse(JSON.stringify(c));for(let a=0;n[0].includes("&");a++)n[0]=n[0].replace("&",t[a][1]);for(let a=0;a<n[1].length;a++){const c=n[1][a];for(;t.length>0&&c[0].includes(t[0][0]);){const n=t.shift();c[0]=c[0].replace(n[0],n[2])}}for(let a=0;a<n[1].length;a++){const c=n[1][a];for(;t.length>0&&c[1].includes(t[0][0]);){const n=t.shift();c[1]=c[1].replace(n[0],n[2])}}return n})},o=t=>{const n=t[0].split("-").map(t=>c[t]||t[0]).join("");return t[1].map(a=>[`${n}${a.split(" ").map(t=>t[0].toUpperCase()).join("")}`,[[t[0],a]]])},r=t=>{const c=[].concat(n((t.defs||[]).map(n=>e(t,n))),n((t.props||[]).map(o)),t.raw||[]);return n(a((t.mods||[]).map(t=>[["",""]].concat(t))).map(t=>t.reduce((t,n)=>n[1]?"@"===n[1][0]?[[n[1],t.map(t=>[`${n[0]}${t[0]}`,t[1]])]]:t.map(t=>[`${n[0]}${t[0]}${n[1]}`,t[1]]):t,c)))},p=t=>t.map(t=>"@"===t[0][0]?`${t[0]}{${p(t[1])}}`:`.${t[0]}{${t[1].map(t=>t.join(":")).join(";")}}`).join(""),s=t=>p(r(t));export{r as ainsleyToAst,s as ainsleyToCss,p as astToCss,e as expandDefs,o as expandProps,c as propFragMap};
