const t=/\{[a-z]+\}/gi,c=t=>{let c=[[]];for(;t.length;)c=t.shift().flatMap(t=>c.map(c=>[...c,t]));return c},a={flex:"fx",background:"bg",min:"n",max:"x",style:"st",overflow:"ov",cursor:"cu"},o=([t,c])=>{const o=t.split("-").map(t=>a[t]||t[0]).join("");return c.map(c=>["".concat(o).concat(c.split(" ").map(t=>t[0].toUpperCase()).join("")),[[t,c]]])},n=a=>{const n=[...(a.defs||[]).flatMap(o=>((a,o)=>{let[n,e]=o;const r=[[],[]];for(let[c,a]of e){const o=c.match(t);o&&r[0].push(...o);const n=a.match(t);n&&r[1].push(...n)}return c(r.flat().map(t=>Object.entries(a[t]).map(([c,a])=>[t,c,a]))).map(t=>{const c=[n,e.map(t=>[...t])];for(let a=0;c[0].includes("&");a++)c[0]=c[0].replace("&",t[a][1]);for(let a of c[1])for(;t.length>0&&a[0].includes(t[0][0]);){const[c,,o]=t.shift();a[0]=a[0].replace(c,o)}for(let a of c[1])for(;t.length>0&&a[1].includes(t[0][0]);){const[c,,o]=t.shift();a[1]=a[1].replace(c,o)}return c})})(a,o)),...(a.props||[]).flatMap(o),...a.raw||[]];return c((a.mods||[]).map(t=>[["",""],...t])).flatMap(t=>t.reduce((t,[c,a])=>a?"@"===a[0]?[[a,t.map(([t,a])=>["".concat(c).concat(t),a])]]:t.map(([t,o])=>["".concat(c).concat(t).concat(a),o]):t,n))},e=t=>t.map(([t,c])=>"@"===t[0]?"".concat(t,"{").concat(e(c),"}"):".".concat(t,"{").concat(c.map(([t,c])=>"".concat(t,":").concat(c)).join(";"),"}")).join("");export default t=>e(n(t));
