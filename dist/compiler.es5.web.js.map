{"version":3,"file":"compiler.es5.web.js","sources":["../src/compiler.js"],"sourcesContent":["const iteratorRegex = /\\{[a-z]+\\}/gi;\n\nconst flat = arr => [].concat.apply([], arr);\n\nconst combinations = mods => {\n  let list = [[]];\n  while (mods.length)\n    list = flat(mods.shift().map(opt => list.map(prev => prev.concat([opt]))));\n  return list;\n};\n\nexport const propFragMap = {\n  flex: \"fx\",\n  background: \"bg\",\n  min: \"n\",\n  max: \"x\",\n  style: \"st\",\n  overflow: \"ov\",\n  cursor: \"cu\"\n};\n\n// expand ainsley.defs\nexport const expandDefs = (ainsley, ruleSet) => {\n  let propIterators = [];\n  let valIterators = [];\n\n  ruleSet[1].forEach(pair => {\n    propIterators = propIterators.concat(pair[0].match(iteratorRegex) || []);\n    valIterators = valIterators.concat(pair[1].match(iteratorRegex) || []);\n  });\n\n  return combinations(\n    propIterators\n      .concat(valIterators)\n      .map(i => Object.keys(ainsley[i]).map(k => [i, k, ainsley[i][k]]))\n  ).map(perm => {\n    const clone = JSON.parse(JSON.stringify(ruleSet));\n    for (let i = 0; clone[0].includes(\"&\"); i++) {\n      clone[0] = clone[0].replace(\"&\", perm[i][1]);\n    }\n    for (let i = 0; i < clone[1].length; i++) {\n      const decl = clone[1][i];\n      while (perm.length > 0 && decl[0].includes(perm[0][0])) {\n        const first = perm.shift();\n        decl[0] = decl[0].replace(first[0], first[2]);\n      }\n    }\n    for (let i = 0; i < clone[1].length; i++) {\n      const decl = clone[1][i];\n      while (perm.length > 0 && decl[1].includes(perm[0][0])) {\n        const first = perm.shift();\n        decl[1] = decl[1].replace(first[0], first[2]);\n      }\n    }\n    return clone;\n  });\n};\n\n// expand ainsley.props\nexport const expandProps = pair => {\n  const propAbbrev = pair[0]\n    .split(\"-\")\n    .map(w => propFragMap[w] || w[0])\n    .join(\"\");\n  return pair[1].map(value => [\n    `${propAbbrev}${value\n      .split(\" \")\n      .map(w => w[0].toUpperCase())\n      .join(\"\")}`,\n    [[pair[0], value]]\n  ]);\n};\n\n// compile ainsley to a simple stylesheet ast\nexport const ainsleyToAst = ainsley => {\n  const ast = [].concat(\n    flat((ainsley.defs || []).map(def => expandDefs(ainsley, def))),\n    flat((ainsley.props || []).map(expandProps)),\n    ainsley.raw || []\n  );\n  return flat(\n    combinations((ainsley.mods || []).map(mod => [[\"\", \"\"]].concat(mod))).map(\n      comb =>\n        comb.reduce((ast, pair) => {\n          if (!pair[1]) {\n            return ast;\n          } else if (pair[1][0] === \"@\") {\n            return [\n              [\n                pair[1],\n                ast.map(subpair => [`${pair[0]}${subpair[0]}`, subpair[1]])\n              ]\n            ];\n          } else {\n            return ast.map(subpair => [\n              `${pair[0]}${subpair[0]}${pair[1]}`,\n              subpair[1]\n            ]);\n          }\n        }, ast)\n    )\n  );\n};\n\n// generate css from simple stylesheet ast\nexport const astToCss = ast =>\n  ast\n    .map(pair =>\n      pair[0][0] === \"@\"\n        ? `${pair[0]}{${astToCss(pair[1])}}`\n        : `.${pair[0]}{${pair[1].map(subpair => subpair.join(\":\")).join(\";\")}}`\n    )\n    .join(\"\");\n\n// generate css from ainsley\nexport const ainsleyToCss = ainsley => astToCss(ainsleyToAst(ainsley));\n"],"names":["iteratorRegex","flat","arr","concat","apply","combinations","mods","list","length","shift","map","opt","prev","propFragMap","flex","background","min","max","style","overflow","cursor","expandDefs","ainsley","ruleSet","propIterators","valIterators","forEach","pair","match","i","Object","keys","k","perm","clone","JSON","parse","stringify","includes","replace","decl","first","expandProps","propAbbrev","split","w","join","value","toUpperCase","ainsleyToAst","ast","defs","def","props","raw","mod","comb","reduce","subpair","astToCss"],"mappings":"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"}