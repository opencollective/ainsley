{"version":3,"file":"compiler.lite.js","sources":["../src/src/utils.js","../src/compiler.js"],"sourcesContent":[null,"import { fastClone, map, flat, combinations, toString } from \"./utils\";\n\nexport const propFragMap = {\n  flex: \"fx\",\n  background: \"bg\",\n  min: \"n\",\n  max: \"x\",\n  style: \"st\",\n  overflow: \"ov\",\n  cursor: \"cu\"\n};\n\nexport const iteratorRegex = /\\{[a-z]+\\}/gi;\n\n// private constants\nconst _hyphenOrDigitRegex = /-|[^0-9]/g;\nconst _upperOrDigitRegex = /[^A-Z0-9]/g;\n\n// private helpers\nconst _abbrev = w => propFragMap[w] || w[0];\nconst _expandDeclaration = subpair => `${subpair[0]}:${subpair[1]}`;\nconst _addEmptyMod = mod => [[\"\", \"\"]].concat(mod);\nconst _abbrevWord = w => w[0].toUpperCase();\nconst _toPair = (input, isProp) => {\n  if (typeof input === \"number\") {\n    const str = toString(input);\n    return [\n      str.replace(_hyphenOrDigitRegex, match => (match === \"-\" ? \"N\" : \"\")),\n      str\n    ];\n  } else {\n    return [\n      input.replace(_upperOrDigitRegex, \"\"),\n      isProp ? input.toUpperCase() : input.toLowerCase()\n    ];\n  }\n};\nconst _toPairs = (inputs, isProp = true) =>\n  inputs.length\n    ? map(inputs, input => _toPair(input, isProp))\n    : map(Object.keys(inputs), key => [toString(key), toString(inputs[key])]);\n\n// expand ainsley.defs\nexport const expandDefs = (ainsley, ruleSet) => {\n  const pair = ruleSet[1].reduce(\n    (iters, pair) => [\n      iters[0].concat(toString(pair[0]).match(iteratorRegex) || []),\n      iters[1].concat(toString(pair[1]).match(iteratorRegex) || [])\n    ],\n    [[], []]\n  );\n\n  return map(\n    combinations(\n      map(pair[0].concat(pair[1]), iter =>\n        map(Object.keys(ainsley[iter]), abbr => [\n          iter,\n          abbr,\n          ainsley[iter][abbr]\n        ])\n      )\n    ),\n    perm => {\n      const clone = fastClone(ruleSet);\n      for (let i = 0; clone[0].includes(\"&\"); i++) {\n        clone[0] = clone[0].replace(\"&\", perm[i][1]);\n      }\n      for (let i = 0; i < clone[1].length; i++) {\n        const decl = clone[1][i];\n        while (perm.length > 0 && decl[0].includes(perm[0][0])) {\n          const first = perm.shift();\n          decl[0] = decl[0].replace(first[0], first[2]);\n        }\n      }\n      for (let i = 0; i < clone[1].length; i++) {\n        const decl = clone[1][i];\n        while (perm.length > 0 && decl[1].includes(perm[0][0])) {\n          const first = perm.shift();\n          decl[1] = decl[1].replace(first[0], first[2]);\n        }\n      }\n      return clone;\n    }\n  );\n};\n\n// expand ainsley.props\nexport const expandProps = pair => {\n  const propAbbrev = map(pair[0].split(\"-\"), _abbrev).join(\"\");\n  return map(_toPairs(pair[1], false), subpair => [\n    `${propAbbrev}${subpair[0]}`,\n    [[pair[0], subpair[1]]]\n  ]);\n};\n\n// compile ainsley to a simple stylesheet ast\nexport const ainsleyToAST = ainsley => {\n  const ast = [].concat(\n    flat(map(ainsley.defs || [], def => expandDefs(ainsley, def))),\n    flat(map(ainsley.props || [], expandProps)),\n    ainsley.raw || []\n  );\n  return flat(\n    map(combinations(map(ainsley.mods || [], _addEmptyMod)), comb =>\n      comb.reduce((ast, pair) => {\n        if (!pair[1]) {\n          return ast;\n        } else if (pair[1][0] === \"@\") {\n          return [\n            [\n              pair[1],\n              map(ast, subpair => [`${pair[0]}${subpair[0]}`, subpair[1]])\n            ]\n          ];\n        } else {\n          return map(ast, subpair => [\n            `${pair[0]}${subpair[0]}${pair[1]}`,\n            subpair[1]\n          ]);\n        }\n      }, ast)\n    )\n  );\n};\n\nexport const ruleToCSS = rule =>\n  rule[0][0] === \"@\"\n    ? `${rule[0]}{${astToCSS(rule[1])}}`\n    : `.${rule[0]}{${map(rule[1], _expandDeclaration).join(\";\")}}`;\n\n// generate css from simple stylesheet ast\nexport const astToCSS = ast => map(ast, ruleToCSS).join(\"\");\n\n// generate css from ainsley\nexport const ainsleyToCSS = ainsley => astToCSS(ainsleyToAST(ainsley));\n\n// insert ainsley into a dom\nexport const ainsleyInsert = (ainsley, stylesheet) => {\n  const ast = ainsleyToAST(ainsley);\n  for (let i = ast.length - 1; i >= 0; i--) {\n    stylesheet.insertRule(ruleToCSS(ast[i]), 0);\n  }\n};\n"],"names":["fastClone","val","arr","len","length","i","push","map","fn","out","flat","concat","apply","combinations","mods","list","shift","opt","prev","toString","value","propFragMap","flex","background","min","max","style","overflow","cursor","iteratorRegex","_hyphenOrDigitRegex","_upperOrDigitRegex","_abbrev","w","_expandDeclaration","subpair","_addEmptyMod","mod","_toPairs","inputs","isProp","input","str","replace","match","toUpperCase","toLowerCase","_toPair","Object","keys","key","expandProps","pair","propAbbrev","split","join","ainsleyToAST","ainsley","ast","defs","def","ruleSet","reduce","iters","iter","abbr","perm","clone","includes","decl","first","expandDefs","props","raw","comb","ruleToCSS","rule","astToCSS"],"mappings":"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"}