{"version":3,"file":"compiler.lite.js","sources":["../src/src/utils.js","../src/compiler.js"],"sourcesContent":[null,"import { fastClone, map, flat, combinations, toString } from \"./utils\";\n\nexport const iteratorRegex = /\\{[a-z]+\\}/gi;\n\n// private constants\nconst _hyphenOrDigitRegex = /-|[^0-9]/g;\nconst _notUpperOrDigitRegex = /[^A-Z0-9]/g;\n\n// private helpers\nconst _expandDeclaration = subpair => `${subpair[0]}:${subpair[1]}`;\nconst _addEmptyMod = mod => [[\"\", \"\"]].concat(mod);\nconst _toCase = (s, upper) => s[`to${upper ? \"Upp\" : \"Low\"}erCase`]();\nconst _toPair = (input, isValue) => {\n  if (typeof input === \"number\") {\n    const str = toString(input);\n    return [\n      str.replace(_hyphenOrDigitRegex, match => (match === \"-\" ? \"N\" : \"\")),\n      str\n    ];\n  } else {\n    return [\n      _toCase(input.replace(_notUpperOrDigitRegex, \"\"), isValue),\n      _toCase(input, false)\n    ];\n  }\n};\nconst _toPairs = (inputs, isValue) =>\n  inputs.length\n    ? map(inputs, input => _toPair(input, isValue))\n    : map(Object.keys(inputs), key => [toString(key), toString(inputs[key])]);\n\n// expand ainsley.defs\nexport const expandDefs = (ainsley, ruleSet) => {\n  const pair = ruleSet[1].reduce(\n    (iters, pair) => [\n      iters[0].concat(toString(pair[0]).match(iteratorRegex) || []),\n      iters[1].concat(toString(pair[1]).match(iteratorRegex) || [])\n    ],\n    [[], []]\n  );\n\n  return map(\n    combinations(\n      flat([\n        map(pair[0], iter =>\n          map(_toPairs(ainsley[iter]), pair => [iter, pair[0], pair[1]])\n        ),\n        map(pair[1], iter =>\n          map(_toPairs(ainsley[iter], true), pair => [iter, pair[0], pair[1]])\n        )\n      ])\n    ),\n    perm => {\n      const clone = fastClone(ruleSet);\n      for (let i = 0; clone[0].includes(\"&\"); i++) {\n        clone[0] = clone[0].replace(\"&\", perm[i][1]);\n      }\n      for (let i = 0; i < clone[1].length; i++) {\n        const decl = clone[1][i];\n        while (perm.length > 0 && decl[0].includes(perm[0][0])) {\n          const first = perm.shift();\n          decl[0] = decl[0].replace(first[0], first[2]);\n        }\n      }\n      for (let i = 0; i < clone[1].length; i++) {\n        const decl = clone[1][i];\n        while (perm.length > 0 && decl[1].includes(perm[0][0])) {\n          const first = perm.shift();\n          decl[1] = decl[1].replace(first[0], first[2]);\n        }\n      }\n      return clone;\n    }\n  );\n};\n\n// expand ainsley.props\nexport const expandProps = pair => {\n  const prop = _toPairs([pair[0]])[0];\n  return map(_toPairs(pair[1], true), subpair => [\n    `${prop[0]}${subpair[0]}`,\n    [[prop[1], subpair[1]]]\n  ]);\n};\n\n// compile ainsley to a simple stylesheet ast\nexport const ainsleyToAST = ainsley => {\n  const ast = [].concat(\n    flat(map(ainsley.defs || [], def => expandDefs(ainsley, def))),\n    flat(map(ainsley.props || [], expandProps)),\n    ainsley.raw || []\n  );\n  return [ainsley.reset || \"\"].concat(\n    flat(\n      map(combinations(map(ainsley.mods || [], _addEmptyMod)), comb =>\n        comb.reduce((ast, pair) => {\n          if (!pair[1]) {\n            return ast;\n          } else if (pair[1][0] === \"@\") {\n            return [\n              [\n                pair[1],\n                map(ast, subpair => [`${pair[0]}${subpair[0]}`, subpair[1]])\n              ]\n            ];\n          } else {\n            return map(ast, subpair => [\n              `${pair[0]}${subpair[0]}${pair[1]}`,\n              subpair[1]\n            ]);\n          }\n        }, ast)\n      )\n    )\n  );\n};\n\nexport const ruleToCSS = rule => {\n  if (typeof rule === \"string\") return rule;\n  return rule[0][0] === \"@\"\n    ? `${rule[0]}{${astToCSS(rule[1])}}`\n    : `.${rule[0]}{${map(rule[1], _expandDeclaration).join(\";\")}}`;\n};\n\n// generate css from simple stylesheet ast\nexport const astToCSS = ast => map(ast, ruleToCSS).join(\"\");\n\n// generate css from ainsley\nexport const ainsleyToCSS = ainsley => astToCSS(ainsleyToAST(ainsley));\n\n// insert ainsley into a dom\nexport const ainsleyInsert = (ainsley, stylesheet) => {\n  const ast = ainsleyToAST(ainsley);\n  for (let i = ast.length - 1; i >= 0; i--) {\n    stylesheet.insertRule(ruleToCSS(ast[i]), 0);\n  }\n};\n"],"names":["fastClone","val","arr","len","length","i","push","map","fn","out","flat","concat","apply","combinations","mods","list","shift","opt","prev","toString","value","iteratorRegex","_hyphenOrDigitRegex","_notUpperOrDigitRegex","_expandDeclaration","subpair","_addEmptyMod","mod","_toCase","s","upper","_toPairs","inputs","isValue","input","str","replace","match","_toPair","Object","keys","key","expandProps","pair","prop","ainsleyToAST","ainsley","ast","defs","def","ruleSet","reduce","iters","iter","perm","clone","includes","decl","first","expandDefs","props","raw","reset","comb","ruleToCSS","rule","astToCSS","join"],"mappings":"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"}